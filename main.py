import logging
import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes
from config import BOT_TOKEN

logging.basicConfig(level=logging.INFO)

PROFESSIONS_DATA = {
    "Медицина": {
        "p1": ("IT-медик", "img/11.png"),
        "p2": ("Архитектор медоборудования", "img/12.png"),
        "p3": ("Биоэтик", "img/13.png"),
        "p4": ("Генетический консультант", "img/14.png")
    },
    "Строительство": {
        "p5": ("Специалист по модернизации строительных технологий", "img/15.png"),
        "p6": ("Проектировщик умного дома", "img/16.png"),
        "p7": ("Прораб-вотчер", "img/17.png"),
        "p8": ("BIM-менеджер", "img/18.png")
    },
    "Авиация": {
        "p9": ("Инженер малой авиации", "img/19.png"),
        "p10": ("Аналитик эксплуатационных данных", "img/20.png"),
        "p11": ("Проектировщик дирижаблей", "img/21.png"),
        "p12": ("Проектировщик интерфейса беспилотников", "img/22.png")
    },
    "Безопасность": {
        "p13": ("Аудитор промышленной безопасности", "img/23.png"),
        "p14": ("Дистанционный координатор безопасности", "img/24.png"),
        "p15": ("Экологический системный специалист", "img/25.png"),
        "p16": ("Проектировщик личной безопасности", "img/26.png")
    }
}

IMGG = {
    "Медицина": "img/7.png",
    "Строительство": "img/8.png",
    "Безопасность": "img/9.png",
    "Авиация": "img/10.png"
}

PROFIN = {}
PROFNI = {}

for industry, professions in PROFESSIONS_DATA.items():
    for p, (name, _) in professions.items():
        PROFIN[p] = (name, industry)
        PROFNI[name] = p

DESCRIPTIONS = {
    "ИТ-медик": [
        "ИТ-медик — это специалист с хорошим знанием ИТ.",
        "Он создает базы физиологических данных и управляет ими, создает программное обеспечение для лечебного и диагностического оборудования.",
        "Сейчас в медицине происходит «революция больших данных» – у исследователей появилась бесценная возможность быстро собирать и анализировать огромное количество информации.",
        "А значит, человек, способный управлять медицинскими базами данных, точно не останется без работы."
    ],
    "Архитектор медоборудования": [
        "Архитектор медоборудывания — это специалист в области инженерной и компьютерной графики, материаловедения, сопромата (наука о прочности и надёжности деталей машин и конструкций), деталей машин, электротехники.",
        "Он обладает пространственным мышлением, понимает анатомию и физиологию человека, разбирается в биосовместимости материалов и приборов, является экспертом в области медицинской и технической безопасности."
    ],
    "Биоэтик": [
        "Биоэтик — это специалист, обеспечивающий нормативно-правовые и этические рамки деятельности медицинских, диагностических и биоинженерных центров, в которых осуществляется трансплантология (пересадка ткани или органов) и генетическое моделирование.",
        "Без консультаций с биоэтиком не обойдется ни одна передовая лаборатория – особенно когда дело дойдет до клонирования органов и серьезного вмешательства в гены эмбрионов.",
        "Неслучайно один из ведущих американских вузов – Йельский университет – уже запустил программу по биоэтике на медицинском факультете."
    ],
    "Генетический консультант": [
        "Генетический консультант проводит первичный и плановый генетический анализ в диагностических центрах, обрабатывает данные с диагностических устройств и дает заключение и рекомендации по дальнейшей схеме лечения.",
        "С помощью генетического анализа можно выявлять онко-маркеры, диагностировать наследственные заболевания, определять специфику обмена веществ пациента и исследовать болезни, вызванные вирусными и бактериальными инфекциями.",
        "На данный момент самый известный сервис генетического скрининга – американская компания 23andMe. В России коммерческие исследования генома также проводятся – например, в компаниях «Геноаналитика» и «Ген здоровья семьи»."
    ],
    "Специалист по модернизации строительных технологий": [
        "Специалист по модернизации строительных технологий — это профессионал, хорошо знающий современные технологии в сфере строительства.",
        "Он продвигает их внутри отрасли и внедряет их в конкретные проекты."
    ],
    "Проектировщик умного дома": [
        "Проектировщик инфраструктуры «умного дома» — это специалист, занимающийся проектированием, установкой и настройкой интеллектуальной системы управления домашним хозяйством.",
        "«Умные дома» появляются уже сейчас, но данная профессия вряд ли станет популярной ранее чем через 7–10 лет."
    ],
    "Прораб-вотчер": [
        "Прораб-вотчер — это специалист по строительству с применением цифровых проектов сооружений.",
        "Он может использовать системы распознавания образов для оценки хода строительства и корректировать процесс строительства с учетом результата анализа данных."
    ],
    "BIM-менеджер": [
        "BIM-менеджер-проектировщик — это специалист, работающий над полным жизненным циклом объекта.",
        "BIM-моделирование (Building Information Modeling) — это информационное моделирование здания.",
        "Оно предполагает сбор и комплексную обработку всей информации о здании со всеми ее взаимосвязями и зависимостями."
    ],
    "Аудитор промышленной безопасности": [
        "Аудитор комплексной безопасности в промышленности — это специалист, оценивающий состояние безопасности на уже имеющемся объекте.",
        "Он рассматривает все виды угроз: механические повреждения, пожары, экологические угрозы, кибератаки и т. д."
    ],
    "Дистанционный координатор безопасности": [
        "Это оператор новых автоматизированных и роботизированных охранных систем, следящий за их состоянием через датчики и камеры наблюдения.",
        "В случае необходимости он отправляет на объект группу быстрого реагирования.",
        "Эта профессия является развитием профессии охранника и постепенно заменяется автоматизированными системами."
    ],
    "Экологический системный специалист": [
        "Инженер, работающий с катастрофами, которые осознаются людьми постепенно — например, загрязнения, пластиковые свалки, радиационные утечки.",
        "Он разрабатывает и реализует программы по предотвращению и устранению последствий таких катастроф.",
        "Пример — большое тихоокеанское мусорное пятно, содержащее более 100 миллионов тонн отходов.",
        "Чтобы справляться с такими угрозами, нужны специалисты, способные принимать решения в условиях неопределенности."
    ],
    "Проектировщик личной безопасности": [
        "Специалист, оценивающий риски в жизни человека — от болезней до преступности — и проектирующий пути их предотвращения.",
        "Может быть консультантом или оказывать разовые услуги (например, при поездке в опасный регион)."
    ],
    "Инженер малой авиации": [
        "Инженер, занимающийся проектированием и моделированием летательных аппаратов малой авиации.",
        "С развитием региональной авиации (например, на Дальнем Востоке) спрос на таких специалистов будет расти."
    ],
    "Аналитик эксплуатационных данных": [
        "Специалист по обработке данных и подготовке экспертных заключений по состоянию летательных аппаратов и околополетного пространства."
    ],
    "Проектировщик дирижаблей": [
        "Специалист, разрабатывающий модели дирижаблей с учетом условий эксплуатации и задач (грузовые, пассажирские и т. д.)."
    ],
    "Проектировщик интерфейса беспилотников": [
        "Специалист по интерфейсам и ПО для управления беспилотниками.",
        "Он отвечает за навигацию, безопасность и программные системы летательных аппаратов."
    ]
}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("Хорошо, я готов!", callback_data="start")],
        [InlineKeyboardButton("Пройти викторину", callback_data="quiz")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_photo(open("img/1.png", "rb"))
    await update.message.reply_text('Добро пожаловать!🖐️ Перед вами бот, который поможет разобраться в популярных цифровых профессиях. \nВам откроется квиз в "Начале", который вы сможете пройти после просмотра нескольких профессий', reply_markup=reply_markup)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data == "start":
        await query.message.reply_photo(open("img/2.png", "rb"))
        keyboard = [
            [InlineKeyboardButton(industry, callback_data=f"i_{industry}")]
            for industry in PROFESSIONS_DATA
        ]
        keyboard.append([InlineKeyboardButton("⬅️ Назад", callback_data="to_main")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_text("Выберете интересующую Вас отрасль профессий", reply_markup=reply_markup)

    elif data == "to_main":
        await start(update, context)

    elif data.startswith("i_"):
        industry = data[2:]
        context.user_data["industry"] = industry
        keyboard = [
            [InlineKeyboardButton(name, callback_data=f"p_{p}")]
            for p, (name, _) in PROFESSIONS_DATA[industry].items()
        ]
        keyboard.append([InlineKeyboardButton("⬅️ Назад", callback_data="start")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_photo(
            photo=open(IMGG[industry], "rb"),
            caption="Выберите интересующую Вас профессию",
            reply_markup=reply_markup
        )

    elif data.startswith("p_"):
        p = data[2:]
        if p not in PROFIN:
            await query.message.reply_text("Ошибка: профессия не найдена.")
            return
        name, industry = PROFIN[p]
        img_path = PROFESSIONS_DATA[industry][p][1]
        await query.message.reply_photo(open(img_path, "rb"))
        await query.message.reply_text(f"Вы выбрали профессию: {name}")
        await asyncio.sleep(1)
        for part in DESCRIPTIONS.get(name, ["Описание временно недоступно."]):
            await query.message.reply_text(part)
            await asyncio.sleep(2)
        keyboard = [[InlineKeyboardButton("⬅️ Вернуться назад", callback_data=f"i_{industry}")]]
        await query.message.reply_text("Вы можете вернуться назад:", reply_markup=InlineKeyboardMarkup(keyboard))

    elif data == "quiz":
        await query.message.reply_text("Раздел викторины пока в разработке.")


def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_handler))
    print("Бот запущен")
    app.run_polling()

if __name__ == "__main__":
    main()
