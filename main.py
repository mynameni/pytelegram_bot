import logging
import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes
from config import BOT_TOKEN

logging.basicConfig(level=logging.INFO)

PROFESSIONS_DATA = {
    "–ú–µ–¥–∏—Ü–∏–Ω–∞": {
        "p1": ("IT-–º–µ–¥–∏–∫", "img/11.png"),
        "p2": ("–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä –º–µ–¥–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è", "img/12.png"),
        "p3": ("–ë–∏–æ—ç—Ç–∏–∫", "img/13.png"),
        "p4": ("–ì–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç", "img/14.png")
    },
    "–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ": {
        "p5": ("–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –º–æ–¥–µ—Ä–Ω–∏–∑–∞—Ü–∏–∏ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π", "img/15.png"),
        "p6": ("–ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤—â–∏–∫ —É–º–Ω–æ–≥–æ –¥–æ–º–∞", "img/16.png"),
        "p7": ("–ü—Ä–æ—Ä–∞–±-–≤–æ—Ç—á–µ—Ä", "img/17.png"),
        "p8": ("BIM-–º–µ–Ω–µ–¥–∂–µ—Ä", "img/18.png")
    },
    "–ê–≤–∏–∞—Ü–∏—è": {
        "p9": ("–ò–Ω–∂–µ–Ω–µ—Ä –º–∞–ª–æ–π –∞–≤–∏–∞—Ü–∏–∏", "img/19.png"),
        "p10": ("–ê–Ω–∞–ª–∏—Ç–∏–∫ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö", "img/20.png"),
        "p11": ("–ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤—â–∏–∫ –¥–∏—Ä–∏–∂–∞–±–ª–µ–π", "img/21.png"),
        "p12": ("–ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤—â–∏–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –±–µ—Å–ø–∏–ª–æ—Ç–Ω–∏–∫–æ–≤", "img/22.png")
    },
    "–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å": {
        "p13": ("–ê—É–¥–∏—Ç–æ—Ä –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏", "img/23.png"),
        "p14": ("–î–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω—ã–π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏", "img/24.png"),
        "p15": ("–≠–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Å–∏—Å—Ç–µ–º–Ω—ã–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç", "img/25.png"),
        "p16": ("–ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤—â–∏–∫ –ª–∏—á–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏", "img/26.png")
    }
}

IMG_MAP = {
    "–ú–µ–¥–∏—Ü–∏–Ω–∞": "img/7.png",
    "–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ": "img/8.png",
    "–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å": "img/9.png",
    "–ê–≤–∏–∞—Ü–∏—è": "img/10.png"
}

PROF_ID_TO_NAME = {}
PROF_NAME_TO_ID = {}

for industry, professions in PROFESSIONS_DATA.items():
    for pid, (name, _) in professions.items():
        PROF_ID_TO_NAME[pid] = (name, industry)
        PROF_NAME_TO_ID[name] = pid


def load_descriptions(file_path="descriptions.txt"):
    descriptions = {}
    current_profession = None
    current_lines = []

    with open(file_path, "r", encoding="utf-8") as f:
        for line in f:
            line = line.strip()
            if line.startswith("#"):
                if current_profession and current_lines:
                    descriptions[current_profession] = current_lines
                current_profession = line[1:].strip()
                current_lines = []
            elif line == "":
                continue
            else:
                current_lines.append(line)

        if current_profession and current_lines:
            descriptions[current_profession] = current_lines

    return descriptions


QUIZ_QUESTIONS = [
    {
        "question": "1. –ö—Ç–æ —Å–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –¥–ª—è –ª–µ—á–µ–±–Ω–æ–≥–æ –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è?",
        "options": ["IT-–º–µ–¥–∏–∫", "–ë–∏–æ—ç—Ç–∏–∫"],
        "correct": "IT-–º–µ–¥–∏–∫"
    },
    {
        "question": "2. –ö—Ç–æ —è–≤–ª—è–µ—Ç—Å—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º –≤ –æ–±–ª–∞—Å—Ç–∏ –∏–Ω–∂–µ–Ω–µ—Ä–Ω–æ–π –∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫–∏?",
        "options": [
            "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –º–æ–¥–µ—Ä–Ω–∏–∑–∞—Ü–∏–∏ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π",
            "–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä –º–µ–¥–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è"
        ],
        "correct": "–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä –º–µ–¥–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è"
    },
    {
        "question": "3. –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç, –∑–∞–Ω–∏–º–∞—é—â–∏–π—Å—è –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º, —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ–º–∞—à–Ω–∏–º —Ö–æ–∑—è–π—Å—Ç–≤–æ–º ‚Äî —ç—Ç–æ...",
        "options": [
            "–ü—Ä–æ—Ä–∞–±-–≤–æ—Ç—á–µ—Ä",
            "–ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤—â–∏–∫ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã '—É–º–Ω–æ–≥–æ –¥–æ–º–∞'",
            "–•–æ–∑ - IT —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç"
        ],
        "correct": "–ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤—â–∏–∫ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã '—É–º–Ω–æ–≥–æ –¥–æ–º–∞'"
    },
    {
        "question": "4. –ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤—â–∏–∫ –ª–∏—á–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ ‚Äì —ç—Ç–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç, –æ—Ü–µ–Ω–∏–≤–∞—é—â–∏–π –∂–∏–∑–Ω—å —á–µ–ª–æ–≤–µ–∫–∞ —Å —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ä–∏—Å–∫–æ–≤ –∏...",
        "options": [
            "–ø–µ—Ä–µ–¥–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –≤–∞—à–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏ —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º",
            "–Ω–µ –ø–æ–¥–ø—É—Å–∫–∞–µ—Ç –∫ –≤–∞–º –Ω–∞ –ø–æ—Ä–æ–≥ –Ω–µ–∑–≤–∞–Ω–Ω—ã—Ö –≥–æ—Å—Ç–µ–π",
            "–∏—Ö –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è"
        ],
        "correct": "–∏—Ö –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è"
    },
    {
        "question": "5. –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç, –æ—Ü–µ–Ω–∏–≤–∞—é—â–∏–π —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–∞ —É–∂–µ –∏–º–µ—é—â–µ–º—Å—è –æ–±—ä–µ–∫—Ç–µ ‚Äî —ç—Ç–æ...",
        "options": [
            "–ê—É–¥–∏—Ç–æ—Ä –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏",
            "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –ø—Ä–µ–æ–¥–æ–ª–µ–Ω–∏—é —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –∫–∞—Ç–∞—Å—Ç—Ä–æ—Ñ",
            "–î–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω—ã–π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"
        ],
        "correct": "–ê—É–¥–∏—Ç–æ—Ä –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏"
    },
    {
        "question": "6. –≠—Ç–æ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ–º –¥–µ—à–µ–≤—ã—Ö –ª–µ—Ç–∞—Ç–µ–ª—å–Ω—ã—Ö –∞–ø–ø–∞—Ä–∞—Ç–æ–≤ –º–∞–ª–æ–π –∞–≤–∏–∞—Ü–∏–∏:",
        "options": [
            "–ê–Ω–∞–ª–∏—Ç–∏–∫ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö",
            "–ò–Ω–∂–µ–Ω–µ—Ä –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –º–∞–ª–æ–π –∞–≤–∏–∞—Ü–∏–∏",
            "–ì–ª–æ–±–∞–ª—å–Ω—ã–π –∏–Ω–∂–µ–Ω–µ—Ä –≤–æ–µ–Ω–Ω—ã—Ö –ë–ü–õ–ê"
        ],
        "correct": "–ò–Ω–∂–µ–Ω–µ—Ä –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –º–∞–ª–æ–π –∞–≤–∏–∞—Ü–∏–∏"
    },
    {
        "question": "7. –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç, —Ä–∞–±–æ—Ç–∞—é—â–∏–π –Ω–∞–¥ –ø–æ–ª–Ω—ã–º –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –æ–±—ä–µ–∫—Ç–∞ ‚Äî —ç—Ç–æ...",
        "options": [
            "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –º–æ–¥–µ—Ä–Ω–∏–∑–∞—Ü–∏–∏ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π",
            "–ü—Ä–æ—Ä–∞–±-–≤–æ—Ç—á–µ—Ä",
            "BIM-–º–µ–Ω–µ–¥–∂–µ—Ä-–ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤—â–∏–∫"
        ],
        "correct": "BIM-–º–µ–Ω–µ–¥–∂–µ—Ä-–ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤—â–∏–∫"
    },
    {
        "question": "8. –ö–∞–∫–∞—è –æ—Ç—Ä–∞—Å–ª—å —è–≤–ª—è–µ—Ç—Å—è –æ–¥–Ω–∏–º –∏–∑ –ª–∏–¥–µ—Ä–æ–≤ –ø–æ —á–∏—Å–ª—É —Ä–∞–±–æ—á–∏—Ö –º–µ—Å—Ç –≤ —Å—Ç—Ä–∞–Ω–µ?",
        "options": [
            "–ú–µ–¥–∏—Ü–∏–Ω–∞",
            "–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ",
            "–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å",
            "–ê–≤–∏–∞—Ü–∏—è"
        ],
        "correct": "–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ"
    }
]


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–•–æ—Ä–æ—à–æ, —è –≥–æ—Ç–æ–≤", callback_data="start")],
        [InlineKeyboardButton("–ü—Ä–æ–π—Ç–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É", callback_data="quiz")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    if update.message:
        await update.message.reply_photo(open("img/1.png", "rb"))
        await update.message.reply_text(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!üñêÔ∏è –ü–µ—Ä–µ–¥ –≤–∞–º–∏ –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ü–∏—Ñ—Ä–æ–≤—ã—Ö –ø—Ä–æ—Ñ–µ—Å—Å–∏—è—Ö."
            "–í–∞–º –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –∫–≤–∏–∑ –≤ '–ù–∞—á–∞–ª–µ', –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø—Ä–æ–π—Ç–∏ –ø–æ—Å–ª–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø—Ä–æ—Ñ–µ—Å—Å–∏–π",
            reply_markup=reply_markup)
    elif update.callback_query:
        await update.callback_query.message.reply_photo(open("img/1.png", "rb"))
        await update.callback_query.message.reply_text(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!üñêÔ∏è –ü–µ—Ä–µ–¥ –≤–∞–º–∏ –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ü–∏—Ñ—Ä–æ–≤—ã—Ö –ø—Ä–æ—Ñ–µ—Å—Å–∏—è—Ö."
            "–í–∞–º –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –∫–≤–∏–∑ –≤ '–ù–∞—á–∞–ª–µ', –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø—Ä–æ–π—Ç–∏ –ø–æ—Å–ª–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø—Ä–æ—Ñ–µ—Å—Å–∏–π",
            reply_markup=reply_markup)


async def start_callback(message, context):
    keyboard = [
        [InlineKeyboardButton("–•–æ—Ä–æ—à–æ, —è –≥–æ—Ç–æ–≤", callback_data="start")],
        [InlineKeyboardButton("–ü—Ä–æ–π—Ç–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É", callback_data="quiz")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await message.reply_photo(open("img/1.png", "rb"))
    await message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!üñêÔ∏è –ü–µ—Ä–µ–¥ –≤–∞–º–∏ –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ü–∏—Ñ—Ä–æ–≤—ã—Ö –ø—Ä–æ—Ñ–µ—Å—Å–∏—è—Ö."
        "–í–∞–º –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –∫–≤–∏–∑ –≤ '–ù–∞—á–∞–ª–µ', –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø—Ä–æ–π—Ç–∏ –ø–æ—Å–ª–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø—Ä–æ—Ñ–µ—Å—Å–∏–π",
        reply_markup=reply_markup)


async def start_quiz(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["quiz_step"] = 0
    context.user_data["score"] = 0
    await send_quiz_question(update.callback_query.message, context)


async def send_quiz_question(message, context):
    step = context.user_data.get("quiz_step", 0)
    if step < len(QUIZ_QUESTIONS):
        question_data = QUIZ_QUESTIONS[step]
        keyboard = [
            [InlineKeyboardButton(option, callback_data=f"q_{int(option == question_data['correct'])}")]
            for option in question_data["options"]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await message.reply_text(question_data["question"], reply_markup=reply_markup)
    else:
        score = context.user_data.get("score", 0)
        await message.reply_text(f"–í—ã –ø—Ä–æ—à–ª–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É! –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {score} –∏–∑ {len(QUIZ_QUESTIONS)}")
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ", callback_data="to_main")]]
        await message.reply_text("–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–π—Ç–∏ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥?",
                                 reply_markup=InlineKeyboardMarkup(keyboard))


async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data == "start":
        await query.message.reply_photo(open("img/2.png", "rb"))
        keyboard = [
            [InlineKeyboardButton(industry, callback_data=f"i_{industry}")]
            for industry in PROFESSIONS_DATA
        ]
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="to_main")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å –æ—Ç—Ä–∞—Å–ª—å:", reply_markup=reply_markup)
        return

    if data == "to_main":
        await start_callback(query.message, context)
        return

    if data == "quiz":
        await start_quiz(update, context)
        return

    if data.startswith("q_"):
        is_correct = bool(int(data[2:]))
        if is_correct:
            context.user_data["score"] = context.user_data.get("score", 0) + 1
            await query.message.reply_text("‚úÖ –í–µ—Ä–Ω–æ!")
        else:
            await query.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω–æ.")
        context.user_data["quiz_step"] = context.user_data.get("quiz_step", 0) + 1
        await send_quiz_question(query.message, context)
        return

    if data.startswith("i_"):
        industry = data[2:]
        context.user_data["industry"] = industry
        keyboard = [
            [InlineKeyboardButton(name, callback_data=f"p_{pid}")]
            for pid, (name, _) in PROFESSIONS_DATA[industry].items()
        ]
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="start")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_photo(
            photo=open(IMG_MAP[industry], "rb"),
            caption="–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å –ø—Ä–æ—Ñ–µ—Å—Å–∏—é:",
            reply_markup=reply_markup
        )
        return

    if data.startswith("p_"):
        pid = data[2:]
        if pid not in PROF_ID_TO_NAME:
            await query.message.reply_text("–û—à–∏–±–∫–∞: –ø—Ä–æ—Ñ–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        name, industry = PROF_ID_TO_NAME[pid]
        img_path = PROFESSIONS_DATA[industry][pid][1]
        await query.message.reply_photo(open(img_path, "rb"))
        await query.message.reply_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏—é: {name}")
        await asyncio.sleep(1)
        for part in DESCRIPTIONS.get(name, ["–û–ø–∏—Å–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ."]):
            await query.message.reply_text(part)
            await asyncio.sleep(2)
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data=f"i_{industry}")]]
        await query.message.reply_text("–í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥:", reply_markup=InlineKeyboardMarkup(keyboard))
        return


def main():
    global DESCRIPTIONS
    DESCRIPTIONS = load_descriptions("descriptions.txt")

    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_handler))
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()


if __name__ == "__main__":
    main()
